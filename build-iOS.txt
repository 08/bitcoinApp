Copyright (c) 2011 Ehud Ben-Reuven
Distributed under the MIT/X11 software license, see the accompanying
file license.txt or http://www.opensource.org/licenses/mit-license.php.
This product includes software developed by the OpenSSL Project for use in
the OpenSSL Toolkit (http://www.openssl.org/).  This product includes
cryptographic software written by Eric Young (eay@cryptsoft.com).


iOS (iPhone) build instructions
Ehud Ben-Reuven (udi@benreuven.com)

=====================
= Project directory =
=====================
# create a tmp directory
mkdir ~/tmp
cd tmp
export TMP=`pwd`
cd ..

# create a project directory. For example:
mkdir ~/BitCoinProj
cd BitCoinProj
export PROJ=`pwd`

===========================
= Add bitcoin.org project =
===========================
git clone https://github.com/bitcoin/bitcoin.git bitcoin.org
# patch bitcoin.org project using "#if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR"
# In the file init.cpp
# Change:
<<<
int main(int argc, char* argv[])
>>>
# With:
>>>
#if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
extern "C" int bitcoinmain(int argc, char* argv[]);
int bitcoinmain(int argc, char* argv[])
#else
int main(int argc, char* argv[])
#endif
>>>

# In the file init.cpp
# Change:
<<<
    if (fDaemon)
    {
        // Daemonize
# With:
>>>
#if TARGET_OS_IPHONE  || TARGET_IPHONE_SIMULATOR // no fork on iPhone. Use thread instead
    if (0)
#else
    if (fDaemon)
#endif
    {
        // Daemonize
>>>

# In the file init.cpp
# Place #if !(TARGET_OS_IPHONE  || TARGET_IPHONE_SIMULATOR)
# and   #endif
# arround the code:
    // Make sure only a single bitcoin process is using the data directory.
    string strLockFile = GetDataDir() + "/.lock";
    FILE* file = fopen(strLockFile.c_str(), "a"); // empty lock file; created if it doesn't exist.
    fclose(file);
    static boost::interprocess::file_lock lock(strLockFile.c_str());
    if (!lock.try_lock())
    {
        wxMessageBox(strprintf(_("Cannot obtain a lock on data directory %s.  Bitcoin is probably already running."), GetDataDir().c_str()), "Bitcoin");
        return false;
    }

# In the file headers.h
# Place #if !(TARGET_OS_IPHONE  || TARGET_IPHONE_SIMULATOR)
# and   #endif
# arround the  #include "xpm/..." lines

===============
= Add openssl =
===============
mkdir $TMP/openssl
mkdir $TMP/openssl/openssl_i386
mkdir $TMP/openssl/openssl_armv6
mkdir $TMP/openssl/openssl_armv7

# following http://www.therareair.com/2009/01/01/tutorial-how-to-compile-openssl-for-the-iphone/
# download openssl-1.0.0d.tar.gz from http://www.openssl.org/source/ and open to $TMP/openssl
cd $TMP/openssl/openssl-1.0.0d/
./config --openssldir=$TMP/openssl/openssl_i386/ no-asm
# edit Makefile:
# Find CFLAG and add to the BEGINNING!!:
-D__OpenBSD__ 
# exit editor and run
make
make install

make clean
./config --openssldir=$TMP/openssl/openssl_armv6/ no-asm
# edit Makefile:
# Find CC= cc and change it to:
CC= /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/gcc-4.2
# Find -arch i386 in CFLAG and change it to:
-arch armv6
# Find CFLAG and add to the BEGINNING!!:
-isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS4.3.sdk -D__OpenBSD__
# Find SHARED_LDFLAGS=-arch i386 -dynamiclib and change it to:
SHARED_LDFLAGS=-arch armv6 -dynamiclib
# Find PEX_LIBS= -Wl, -search_paths_firstxc and change it to:
PEX_LIBS= -Wl

# edit crypto/ui/ui_openssl.c and at line 407:
# replace
static volatile sig_atomic_t intr_signal;
# to
static volatile int intr_signal;
# exit editor and run
make
make install

# repeat the process for armv7 (use $TMP/openssl/openssl_armv7/)

cd $TMP/openssl
cp -R openssl_i386/include include
mkdir lib
lipo -create openssl_i386/lib/libcrypto.a openssl_armv6/lib/libcrypto.a openssl_armv7/lib/libcrypto.a -output lib/libcrypto.a
lipo -create openssl_i386/lib/libssl.a openssl_armv6/lib/libssl.a openssl_armv7/lib/libssl.a -output lib/libssl.a

mkdir $PROJ/openssl
cp -R $TMP/openssl/include $PROJ/openssl/include
cp -R $TMP/openssl/lib $PROJ/openssl/lib

=============
= Add boost =
=============
# following http://goodliffe.blogspot.com/2010/09/building-boost-framework-for-ios-iphone.html
cd $PROJ
git clone git://gitorious.org/boostoniphone/boostoniphone.git
cd boostoniphone
# edit boost.sh :
# change SDK from 4.2 to 4.3
# replace 4.2.1 to 4.3 (many places)
# NOTE use boost_1_44_0 that comes with git. dont try newer boost versions
# run:
./boost.sh

==================
= Add Berkley DB =
==================
# following http://ankitthakur.wordpress.com/2011/01/16/build-scripts-for-berkely-db-static-libraries-with-ios-development/
# download http://www.oracle.com/technetwork/database/berkeleydb/downloads/index.html
# open in $TMP

cd $TMP/db-5.1.19
mkdir build_i386
mkdir build_armv6
mkdir build_armv7

cd build_unix
export DEV_iSimulator=/Developer/Platforms/iPhoneSimulator.platform/Developer 
export SDK_iSimulator=${DEV_iSimulator}/SDKs/iPhoneSimulator4.3.sdk 
export COMPILER_iSimulator=${DEV_iSimulator}/usr/bin
export CC=${COMPILER_iSimulator}/gcc
export CXX=${COMPILER_iSimulator}/g++
export LDFLAGS="-arch i386 -pipe -Os -gdwarf-2 -no-cpp-precomp -mthumb -isysroot ${SDK_iSimulator}"
export CFLAGS=${LDFLAGS}
export CXXFLAGS=${LDFLAGS}
export CPP="/usr/bin/cpp ${CPPFLAGS}"
export LD=${COMPILER_iSimulator}/ld
export AR=${COMPILER_iSimulator}/ar
export AS=${COMPILER_iSimulator}/as
export NM=${COMPILER_iSimulator}/nm
export RANLIB=${COMPILER_iSimulator}/ranlib
../dist/configure --prefix=$TMP/db-5.1.19/build_i386 --host=i386-apple-darwin10 --enable-cxx
make
make install

make clean
make realclean

export DEV_iOS=/Developer/Platforms/iPhoneOS.platform/Developer 
export SDK_iOS=${DEV_iOS}/SDKs/iPhoneOS4.3.sdk 
export COMPILER_iOS=${DEV_iOS}/usr/bin
export CC=${COMPILER_iOS}/gcc
export CXX=${COMPILER_iOS}/g++
export LDFLAGS="-arch armv6 -pipe -Os -gdwarf-2 -no-cpp-precomp -mthumb -isysroot ${SDK_iOS}"
export CFLAGS=${LDFLAGS}
export CXXFLAGS=${LDFLAGS}
export CPP="/usr/bin/cpp ${CPPFLAGS}"
export LD=${COMPILER_iOS}/ld
export AR=${COMPILER_iOS}/ar
export AS=${COMPILER_iOS}/as
export NM=${COMPILER_iOS}/nm
export RANLIB=${COMPILER_iOS}/ranlib
../dist/configure --prefix=$TMP/db-5.1.19/build_armv6 --host=arm-apple-darwin10 --enable-cxx
make
make install

export DEV_iOS=/Developer/Platforms/iPhoneOS.platform/Developer 
export SDK_iOS=${DEV_iOS}/SDKs/iPhoneOS4.3.sdk 
export COMPILER_iOS=${DEV_iOS}/usr/bin
export CC=${COMPILER_iOS}/gcc
export CXX=${COMPILER_iOS}/g++
export LDFLAGS="-arch armv7 -pipe -Os -gdwarf-2 -no-cpp-precomp -mthumb -isysroot ${SDK_iOS}"
export CFLAGS=${LDFLAGS}
export CXXFLAGS=${LDFLAGS}
export CPP="/usr/bin/cpp ${CPPFLAGS}"
export LD=${COMPILER_iOS}/ld
export AR=${COMPILER_iOS}/ar
export AS=${COMPILER_iOS}/as
export NM=${COMPILER_iOS}/nm
export RANLIB=${COMPILER_iOS}/ranlib
../dist/configure --prefix=$TMP/db-5.1.19/build_armv7 --host=arm-apple-darwin10 --enable-cxx
make
make install

mkdir $PROJ/db
cd $PROJ/db/
mkdir lib
lipo -create $TMP/db-5.1.19/build_i386/lib/libdb.a $TMP/db-5.1.19/build_armv6/lib/libdb.a $TMP/db-5.1.19/build_armv7/lib/libdb.a -output $PROJ/db/lib/libdb.a
lipo -create $TMP/db-5.1.19/build_i386/lib/libdb_cxx.a $TMP/db-5.1.19/build_armv6/lib/libdb_cxx.a $TMP/db-5.1.19/build_armv7/lib/libdb_cxx.a -output $PROJ/db/lib/libdb_cxx.a
cp -R $TMP/db-5.1.19/build_i386/include $PROJ/db/include

===============
= Add Three20 =
===============
cd $PROJ
git clone git://github.com/facebook/three20.git
open three20/samples/TTTwitter/TTTwitter.xcodeproj
#select scheme "TTTwitter | iPhone 4.3 Simulator"
#build (this is necessary to copy the header files into the correct place, dont have a better way)

===========================
= Add BitCoin App project =
===========================
cd $PROJ
git clone git://github.com/udibr/bitcoinApp BitCoin
cd BitCoin
open BitCoin.xcodeproj
# Make sure scheme "BitCoin | iPhone 4.3 Simulator" is selected" (but the code also runs on a device)
# Build & Run

# Usage instructions:
# It takes a while for the bitcoin daemon to start so wait before pressing any of the buttons (just one "info" for now)
# Once you enter the info screen you can refresh it by dragging it all the way down


